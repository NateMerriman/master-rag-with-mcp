# =============================================================================
# MCP Crawl4AI RAG Server - Environment Configuration Example
# =============================================================================
# Copy this file to .env and configure with your actual values
# All settings with defaults are optional unless marked as REQUIRED

# =============================================================================
# REQUIRED: Core Database & API Configuration
# =============================================================================

# OpenAI API Configuration (Required for embeddings and contextual features)
OPENAI_API_KEY=your_openai_api_key_here

# Supabase Database Configuration (Required)
SUPABASE_URL=your_supabase_url_here
SUPABASE_SERVICE_KEY=your_supabase_service_key_here

# =============================================================================
# OPTIONAL: Server Configuration
# =============================================================================

# Server host and port (defaults shown)
HOST=0.0.0.0
PORT=8051

# MCP Transport type (sse or stdio)
TRANSPORT=sse

# =============================================================================
# OPTIONAL: RAG Strategy Configuration
# =============================================================================
# All RAG strategies default to false for backward compatibility

# Core RAG Strategies
USE_CONTEXTUAL_EMBEDDINGS=false      # Enhanced semantic understanding with document context
USE_RERANKING=false                  # Cross-encoder result reranking for better quality
USE_AGENTIC_RAG=false               # Specialized code search and extraction capabilities
USE_HYBRID_SEARCH_ENHANCED=false    # Advanced hybrid search algorithms (future feature)

# =============================================================================
# OPTIONAL: Enhanced Contextual Embeddings Configuration
# =============================================================================
# These settings only apply when USE_CONTEXTUAL_EMBEDDINGS=true

# Adaptive Prompting Features (New in enhanced version)
USE_ADAPTIVE_CONTEXTUAL_PROMPTS=true        # Enable content-type-aware prompting
CONTEXTUAL_CONTENT_TYPE_DETECTION=true      # Auto-detect content types (technical, academic, forum, etc.)
CONTEXTUAL_INCLUDE_CONTENT_TYPE_TAG=true    # Include [TYPE] tags in contextual text for debugging

# Model Configuration for Contextual Features
CONTEXTUAL_MODEL=gpt-4.1-nano     # Model for contextual embeddings
MODEL_CHOICE=gpt-4.1-nano                     # Legacy model setting (still supported)

# =============================================================================
# OPTIONAL: Reranking Configuration
# =============================================================================
# These settings only apply when USE_RERANKING=true

# Reranking Model and Performance
RERANKING_MODEL=cross-encoder/ms-marco-MiniLM-L-6-v2  # Cross-encoder model for reranking
MAX_RERANKING_RESULTS=20                                # Max results to rerank (1-100)
RERANKING_TIMEOUT_MS=500                               # Reranking timeout in milliseconds

# =============================================================================
# OPTIONAL: Code Summary Enhancement Configuration
# =============================================================================
# These settings only apply when USE_AGENTIC_RAG=true and enhance code summaries

# Code Summary Enhancement Strategies
USE_ENHANCED_CODE_SUMMARIES=false           # Enable template-based few-shot learning for code summaries
USE_PROGRESSIVE_CODE_SUMMARIZATION=false    # Enable two-stage code analysis (future feature)
USE_DOMAIN_SPECIFIC_CODE_PROMPTS=true      # Enable content-aware code prompts
USE_CODE_INTENT_DETECTION=true             # Enable automatic code intent recognition
USE_RETRIEVAL_OPTIMIZED_CODE_SUMMARIES=false  # Enable search-optimized summaries (future feature)

# Code Summary Configuration
CODE_SUMMARY_STYLE=practical               # Summary style: "practical", "academic", "tutorial"
CODE_SUMMARY_MAX_CONTEXT_CHARS=300        # Max context characters for code summaries (50-1000)
CODE_SUMMARY_INCLUDE_COMPLEXITY=true      # Include complexity information in summaries

# =============================================================================
# CONFIGURATION EXAMPLES BY USE CASE
# =============================================================================

# Basic Setup (Minimal configuration)
# USE_CONTEXTUAL_EMBEDDINGS=false
# USE_RERANKING=false
# USE_AGENTIC_RAG=false

# Enhanced Search Quality (Recommended for most users)
# USE_CONTEXTUAL_EMBEDDINGS=true
# USE_RERANKING=true
# USE_AGENTIC_RAG=false
# CONTEXTUAL_MODEL=gpt-4.1-nano

# AI Coding Assistant (Full feature set)
# USE_CONTEXTUAL_EMBEDDINGS=true
# USE_RERANKING=true
# USE_AGENTIC_RAG=true
# USE_ADAPTIVE_CONTEXTUAL_PROMPTS=true
# CONTEXTUAL_CONTENT_TYPE_DETECTION=true
# CONTEXTUAL_MODEL=gpt-4.1-nano
# USE_ENHANCED_CODE_SUMMARIES=true
# CODE_SUMMARY_STYLE=practical

# Legacy Compatibility Mode (Enhanced features with original prompting)
# USE_CONTEXTUAL_EMBEDDINGS=true
# USE_ADAPTIVE_CONTEXTUAL_PROMPTS=false
# CONTEXTUAL_CONTENT_TYPE_DETECTION=false

# =============================================================================
# CONTENT TYPE DETECTION CATEGORIES
# =============================================================================
# When CONTEXTUAL_CONTENT_TYPE_DETECTION=true, the system detects:
#
# - TECHNICAL: Documentation, APIs, code guides (GitHub, docs sites)
# - ACADEMIC: Research papers, studies (arXiv, PubMed, scholar.google)
# - FORUM: Discussion threads, Q&A (Reddit, StackOverflow, forums)
# - NEWS: News articles, press releases (CNN, Reuters, BBC)
# - BLOG: Opinion pieces, personal blogs (Medium, Substack)
# - SOCIAL_MEDIA: Social platform posts, threads (Twitter/X, LinkedIn, Instagram, Facebook)
# - LEGAL: Legal documents, contracts, statutes (law sites, court documents)
# - EDUCATIONAL: Tutorials, how-to guides, online courses (Udemy, Coursera, Khan Academy)
# - GENERAL: Fallback for other content types
#
# Each type uses specialized prompts optimized for that content category.

# =============================================================================
# PERFORMANCE NOTES
# =============================================================================
#
# Strategy Impact on Performance:
# - USE_CONTEXTUAL_EMBEDDINGS: +API calls during indexing, better search quality
# - USE_RERANKING: +150-500ms per search, significantly better result ordering  
# - USE_AGENTIC_RAG: +code extraction processing, specialized code search
# - USE_ADAPTIVE_CONTEXTUAL_PROMPTS: Minimal impact, better context generation
# - USE_ENHANCED_CODE_SUMMARIES: +20-40% API usage, +50-100ms per code block, improved search relevance
#
# Code Summary Enhancement Impact:
# - Enhanced summaries improve search relevance by 15-25%
# - Template-based approach provides more consistent summary quality
# - Memory usage increases by ~5-10MB for language examples
# - Best used with CONTEXTUAL_MODEL=gpt-4.1-nano for cost efficiency
#
# Recommended for Production:
# - Start with USE_RERANKING=true for immediate search quality improvement
# - Add USE_CONTEXTUAL_EMBEDDINGS=true for semantic understanding
# - Enable USE_AGENTIC_RAG=true if working with code repositories
# - Add USE_ENHANCED_CODE_SUMMARIES=true for better code search quality
